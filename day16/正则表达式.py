# coding:utf-8

'''
正则表达式常用场景：
1、从大段文字中找到符合规则的内容
2、判断某个字符串是否完全符合规则
'''

# 字符组:[] 写在中括号中的内容，都出现在下面某一个字符的位置上都是符合规则的。
'''
[0-9] 匹配数字
[a-z] 匹配小写字母
[A-Z] 匹配大写字母
[a-zA-Z] 匹配大小写字母
[a-zA-Z0-9] 匹配大小写字母+数字
'''

# 转义符
'''

'''


# 元字符
"""
1、 \w 匹配数字字母下划线 word关键字[a-zA-Z0-9]
2、 \d 匹配所有的数字 digit [0-9]
3、 \s 匹配所有的空白符号  回车，制表符，空格  space
    匹配换行符号 \n
    匹配制表符 \t
    匹配空格    直接空格
\W \D \S 和 \w \d \s 取反
    [\s\S][\d\D][\w\W]是三组全集，意思是匹配所有字符
\b 表示单词的边界

^ 匹配一个字符串的开始
$ 匹配一个字符串的结束

. 匹配除换行符之外的所有字符

[] 表示出现在中括号内的内容都可以被匹配
[^] 表示不出现在中括号中的内容都可以被匹配
    有一些有特殊意义的元字符进入字符组中会回复它本来的意义。: . | [] ()

a|b 或 符合a规则或者b规则的都可以被匹配
    如果a规则是b规则的一部分，且a规则比b规则要苛刻，就把a规则写在前面
    将更复杂\更长的规则写在最前面

() 分组  表示给几个字符加上量词约束的需求的时候，就给这些量词分在一个组
"""

# 量词
'''
{n} 表示这个量词之前的字符出现n次
{n,} 表示这个量词之前的字符至少出现n次
{n,m} 表示这个量词之前的字符出现n-m次
? 表示匹配量词之前的字符出现0次或者1次 表示可有可无
+ 表示匹配量词之前的字符出现1次或者多次
* 表示匹配量词之前的字符出现0次或者多次
'''
# 转义符：
    # 在正则中有特殊意义的字符想让它表示它本来的意义，就在这个字符前面加上\
    # 在正则中一些没有特殊意义的字符加上\ ,可能就变成有特殊意义的字符。/

'''
练习题：
    1、匹配小数或者整数
        \d+\.\d+|\d+
        \d+(\.\d+)?
    2、匹配身份证号码
        [1-9]\d{14}(\d{2}[\dx])?
        
        
'''

# 正则表达式的匹配特点:默认是贪婪模式。在量词的后面加?表示表示非贪婪