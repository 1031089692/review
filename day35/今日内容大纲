今日内容：
    1、IO多路复用
    2、基于IO多路复用+socket实现并发请求(1个线程100个请求)
    3、协程

1、IO多路复用
    作用：检测多个socket是否已经发生变化(是否已经连接成功/是否已经获取数据)(可读/可写)
    (可以检测所有的IO请求)

2、基于IO多路复用+socket实现并发请求(一个线程100个请求)
    IO多路复用
    socket非阻塞

    基于事件循环实现的异步非阻塞框架
    非阻塞：不等待
    异步：执行完某个任务后自动调用我给他的函数
    python中开源 基于事件循环实现的异步非阻塞框架 Twisted

上述总结：
    1、socket默认阻塞的。体现在等待连接阻塞和等待接收阻塞
    2、socket对象中的setblocking(False)方法设置为False使之变为非阻塞
    3、IO多路复用的作用就是检测多个socket是否发生变化
        操作系统检测socket是否发生变化，有三种模式：
            select:最多监听1024个socket；循环去检测(水平触发)
            poll:不限制监听的socket个数；循环去检测
            epoll:不限制监听socket个数；回调方式(边缘触发)
        python模块:
            select.select
            select.epoll
    4、提高并发方案：
        -多进程
        -多线程
        -异步非阻塞(Twisted)     ---scrapy框架
    5、什么是异步非阻塞：
        -非阻塞，不等待：
            比如创建socket对某个地址进行connect、获取接收数据recv时默认都会等待。直到连接成功或收到数据才执行后续操作
            如果设置setblocking(False),以上两个过程就不再等待，但是会报错blockingIOError，捕获即可
        -异步，通过，执行完成之后自动执行回掉函数或自动执行某些操作(通知)
            比如做爬虫中向某个地址发送请求，当请求执行完成之后自动执行会掉函数
    6、什么是同步阻塞：
        同步：按顺序执行
        阻塞：等待

3、协程：是微线程，对一个线程进行分片，使得线程在代码块之前进行来回切换执行，而不是原来的逐行执行。
    单纯的协程无用。
    协程的意义是配合IO切换使用。
    greenlet:协程，人为可以进行代码切换
    gevent:内部依赖greenlet，=greenlet+IO切换

进程、线程、协程的区别。
    进程是计算机资源分配的最小单元，主要作用是数据隔离。
    线程是供CPU调度的最小单元，
    其他语言基本上都是用多线程，不怎么用多进程
    python因为GIL锁的缘故，所以多进程用的比较多一点。一般IO操作用线程，计算密集型用进程
    协程是微线程，对一个线程进行分片，使得线程在代码块之前进行来回切换执行，而不是原来的逐行执行。
    单纯的协程无用，一般IO切换的场景使用较多。


单线程提供并发：
    -协程+IO切换：gevent
    -基于时间循环的异步非阻塞框架：Twisted